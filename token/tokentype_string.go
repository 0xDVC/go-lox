// Code generated by "stringer -type TokenType -trimprefix TokenType_"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenType_LeftParen-0]
	_ = x[TokenType_RightParen-1]
	_ = x[TokenType_LeftBrace-2]
	_ = x[TokenType_RightBrace-3]
	_ = x[TokenType_Comma-4]
	_ = x[TokenType_Dot-5]
	_ = x[TokenType_Minus-6]
	_ = x[TokenType_Plus-7]
	_ = x[TokenType_Semicolon-8]
	_ = x[TokenType_Slash-9]
	_ = x[TokenType_Star-10]
	_ = x[TokenType_Question-11]
	_ = x[TokenType_Colon-12]
	_ = x[TokenType_Bang-13]
	_ = x[TokenType_BangEqual-14]
	_ = x[TokenType_Equal-15]
	_ = x[TokenType_EqualEqual-16]
	_ = x[TokenType_Greater-17]
	_ = x[TokenType_GreaterEqual-18]
	_ = x[TokenType_Less-19]
	_ = x[TokenType_LessEqual-20]
	_ = x[TokenType_Identifier-21]
	_ = x[TokenType_String-22]
	_ = x[TokenType_Number-23]
	_ = x[TokenType_And-24]
	_ = x[TokenType_Class-25]
	_ = x[TokenType_Else-26]
	_ = x[TokenType_False-27]
	_ = x[TokenType_Fun-28]
	_ = x[TokenType_For-29]
	_ = x[TokenType_If-30]
	_ = x[TokenType_Nil-31]
	_ = x[TokenType_Or-32]
	_ = x[TokenType_Print-33]
	_ = x[TokenType_Return-34]
	_ = x[TokenType_Super-35]
	_ = x[TokenType_This-36]
	_ = x[TokenType_True-37]
	_ = x[TokenType_Var-38]
	_ = x[TokenType_While-39]
	_ = x[TokenType_EOF-40]
}

const _TokenType_name = "LeftParenRightParenLeftBraceRightBraceCommaDotMinusPlusSemicolonSlashStarQuestionColonBangBangEqualEqualEqualEqualGreaterGreaterEqualLessLessEqualIdentifierStringNumberAndClassElseFalseFunForIfNilOrPrintReturnSuperThisTrueVarWhileEOF"

var _TokenType_index = [...]uint8{0, 9, 19, 28, 38, 43, 46, 51, 55, 64, 69, 73, 81, 86, 90, 99, 104, 114, 121, 133, 137, 146, 156, 162, 168, 171, 176, 180, 185, 188, 191, 193, 196, 198, 203, 209, 214, 218, 222, 225, 230, 233}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
